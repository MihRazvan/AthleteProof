import {
  readdirSync,
  statSync,
  readFileSync,
  existsSync,
  mkdirSync,
  writeFileSync,
} from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";
import { format } from "prettier";

const __dirname = dirname(fileURLToPath(import.meta.url));

const generatedContractComment = `
/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
`;

function getDirectories(path) {
  return readdirSync(path).filter(function (file) {
    return statSync(path + "/" + file).isDirectory();
  });
}
function getFiles(path) {
  return readdirSync(path).filter(function (file) {
    return statSync(path + "/" + file).isFile();
  });
}
function getArtifactOfContract(contractName) {
  const current_path_to_artifacts = join(
    __dirname,
    "..",
    `out/${contractName}.sol`
  );
  const artifactJson = JSON.parse(
    readFileSync(`${current_path_to_artifacts}/${contractName}.json`)
  );

  return artifactJson;
}

function getInheritedFromContracts(artifact) {
  let inheritedFromContracts = [];
  if (artifact?.ast) {
    for (const astNode of artifact.ast.nodes) {
      if (astNode.nodeType == "ContractDefinition") {
        if (astNode.baseContracts.length > 0) {
          inheritedFromContracts = astNode.baseContracts.map(
            ({ baseName }) => baseName.name
          );
        }
      }
    }
  }
  return inheritedFromContracts;
}

function getInheritedFunctions(mainArtifact) {
  const inheritedFromContracts = getInheritedFromContracts(mainArtifact);
  const inheritedFunctions = {};
  for (const inheritanceContractName of inheritedFromContracts) {
    const {
      abi,
      ast: { absolutePath },
    } = getArtifactOfContract(inheritanceContractName);
    for (const abiEntry of abi) {
      if (abiEntry.type == "function") {
        inheritedFunctions[abiEntry.name] = absolutePath;
      }
    }
  }
  return inheritedFunctions;
}

function main() {
  const current_path_to_broadcast = join(
    __dirname,
    "..",
    "broadcast/Deploy.s.sol"
  );
  const current_path_to_deployments = join(__dirname, "..", "deployments");

  console.log("Current path to broadcast:", current_path_to_broadcast);
  console.log("Current path to deployments:", current_path_to_deployments);

  const chains = getDirectories(current_path_to_broadcast);
  const Deploymentchains = getFiles(current_path_to_deployments);

  console.log("Chains:", chains);
  console.log("Deployment chains:", Deploymentchains);

  const deployments = {};

  Deploymentchains.forEach((chain) => {
    if (!chain.endsWith(".json")) return;
    chain = chain.slice(0, -5);
    try {
      var deploymentObject = JSON.parse(
        readFileSync(`${current_path_to_deployments}/${chain}.json`)
      );
      deployments[chain] = deploymentObject;
    } catch (error) {
      console.error(`Error reading deployment file for chain ${chain}:`, error);
    }
  });

  console.log("Deployments:", deployments);

  const allGeneratedContracts = {};

  chains.forEach((chain) => {
    allGeneratedContracts[chain] = {};
    let broadCastObject;
    try {
      broadCastObject = JSON.parse(
        readFileSync(`${current_path_to_broadcast}/${chain}/run-latest.json`)
      );
    } catch (error) {
      console.error(`Error reading broadcast file for chain ${chain}:`, error);
      return;
    }
    const transactionsCreate = broadCastObject.transactions.filter(
      (transaction) => transaction.transactionType == "CREATE"
    );

    console.log(`Chain ${chain} transactions:`, transactionsCreate);

    transactionsCreate.forEach((transaction) => {
      console.log("Processing transaction:", transaction);
      try {
        const artifact = getArtifactOfContract(transaction.contractName);
        const contractName =
          deployments[chain] && deployments[chain][transaction.contractAddress]
            ? deployments[chain][transaction.contractAddress]
            : transaction.contractName;

        allGeneratedContracts[chain][contractName] = {
          address: transaction.contractAddress,
          abi: artifact.abi,
          inheritedFunctions: getInheritedFunctions(artifact),
        };
      } catch (error) {
        console.error(
          `Error processing transaction for ${transaction.contractName}:`,
          error
        );
      }
    });
  });

  console.log("All generated contracts:", allGeneratedContracts);

  const TARGET_DIR = "../nextjs/contracts/";

  const fileContent = Object.entries(allGeneratedContracts).reduce(
    (content, [chainId, chainConfig]) => {
      return `${content}${parseInt(chainId).toFixed(0)}:${JSON.stringify(
        chainConfig,
        null,
        2
      )},`;
    },
    ""
  );

  if (!existsSync(TARGET_DIR)) {
    mkdirSync(TARGET_DIR);
  }
  writeFileSync(
    `${TARGET_DIR}deployedContracts.ts`,
    format(
      `${generatedContractComment} import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract"; \n\n
 const deployedContracts = {${fileContent}} as const; \n\n export default deployedContracts satisfies GenericContractsDeclaration`,
      {
        parser: "typescript",
      }
    )
  );
}

try {
  main();
} catch (error) {
  console.error("Error in main function:", error);
  process.exitCode = 1;
}
